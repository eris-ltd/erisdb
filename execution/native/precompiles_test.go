package native

import (
	"encoding/hex"
	"fmt"
	"log"
	"testing"

	"github.com/stretchr/testify/require"
)

// TODO: Add more test for each precompile
const (
	bigModExpInput    = "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040e09ad9675465c53a109fac66a445c91b292d2bb2c5268addb30cd82f80fcb0033ff97c80a5fc6f39193ae969c6ede6710a6b7ac27078a06d90ef1c72e5c85fb502fc9e1f6beb81516545975218075ec2af118cd8798df6e08a147c60fd6095ac2bb02c2908cf4dd7c81f11c289e4bce98f3553768f392a80ce22bf5c4f4a248c6b"
	bigModExpExpected = "60008f1614cc01dcfb6bfb09c625cf90b47d4468db81b5f8b7a39d42f332eab9b2da8f2d95311648a8f243f4bb13cfb3d8f7f2a3c014122ebb3ed41b02783adc"

	bn256AddInput    = "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	bn256AddExpected = "030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd315ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4"

	bn256ScaMulInput    = "2bd3e6d0f3b142924f5ca7b49ce5b9d54c4703d7ae5648e61d02268b1a0a9fb721611ce0a6af85915e2f1d70300909ce2e49dfad4a4619c8390cae66cefdb20400000000000000000000000000000000000000000000000011138ce750fa15c2"
	bn256ScaMulExpected = "070a8d6a982153cae4be29d434e8faef8a47b274a053f5a4ee2a6c9c13c31e5c031b8ce914eba3a9ffb989f9cdd5b0f01943074bf4f0f315690ec3cec6981afc"

	bn256PairingInput    = "1c76476f4def4bb94541d57ebba1193381ffa7aa76ada664dd31c16024c43f593034dd2920f673e204fee2811c678745fc819b55d3e9d294e45c9b03a76aef41209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf704bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a416782bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550111e129f1cf1097710d41c4ac70fcdfa5ba2023c6ff1cbeac322de49d1b6df7c2032c61a830e3c17286de9462bf242fca2883585b93870a73853face6a6bf411198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa"
	bn256PairingExpected = "0000000000000000000000000000000000000000000000000000000000000001"
)

type precompile func(Context) ([]byte, error)

func TestBigModExp(t *testing.T) {
	testPrecompile(t, expModFunc, bigModExpInput, bigModExpExpected)
}

func TestBn256Add(t *testing.T) {

	testPrecompile(t, bn256Add, bn256AddInput, bn256AddExpected)

}

func TestBn256ScalarMul(t *testing.T) {

	testPrecompile(t, bn256ScalarMul, bn256ScaMulInput, bn256ScaMulExpected)

}

func TestBn256Pairing(t *testing.T) {
	testPrecompile(t, bn256Pairing, bn256PairingInput, bn256PairingExpected)

}

func testPrecompile(t *testing.T, pr precompile, input, success string) {
	inputb, _ := hex.DecodeString(input)

	ctx := setContext(inputb)
	out, err := pr(*ctx)
	if err != nil {
		log.Println(err.Error())
		t.Logf(err.Error())
		t.Fail()
	}
	fmt.Printf("%x", out)
	require.Equal(t, success, fmt.Sprintf("%x", out))

}

func setContext(input []byte) *Context {
	gas := uint64(1000000)
	ctx := Context{}
	ctx.Input = input
	ctx.Gas = &gas
	return &ctx
}
